<?php


/**
 * Implements hook_menu().
 */
function deploy_static_menu() {
  // Add menu item that produces the "config.xml" data that is linked to a
  // specific gallery.
  $items['deploy'] = array(
    'title' => 'Deploy static site',
    'description' => 'Deploy static site.',
    'page callback' => 'deploy_static_deploy',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}


/**
 * Implements hook_stream_wrappers().
 */
function deploy_static_stream_wrappers() {
  return array(
    'jb' => array(
      'name' => t('Juicebox static files'),
      'class' => 'JbStreamWrapper',
      'description' => t('Provides access to Juicebox static files.'),
      'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
    ),
  );
}


/**
 * Menu callback: generate static site content for hosting.
 */
function deploy_static_deploy() {
  // Set a flag that hooks can use to identify if we are building static verions
  // of the XML.
  // @see deploy_static_juicebox_gallery_alter()
  $xml_paths = array();
  $deploy_static_processing = &drupal_static(__FUNCTION__, TRUE);
  // Get paths for full albums based on photo_tags term filters.
  $vocabulary = taxonomy_vocabulary_machine_name_load('photo_tags');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $term) {
    $xml_paths[] = 'viewsstyle/galleries/page_1/' . str_replace(' ', '-', $term->name);
  }
  // Get paths for country albums based on photo_location_country term filters.
  $vocabulary = taxonomy_vocabulary_machine_name_load('photo_location_country');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $term) {
    $xml_paths[] = 'viewsstyle/galleries/page_2/' . $term->tid;
  }
  // Get paths for state albums based on photo_location_state term filters.
  $vocabulary = taxonomy_vocabulary_machine_name_load('photo_location_state');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $term) {
    $xml_paths[] = 'viewsstyle/galleries/page_2/' . $term->tid;
  }
  // Process XML requests into static data.
  foreach ($xml_paths as $path) {
    // It seems most clean to just used the XML callbak directly, but as it
    // prints content we need to wrap it in output buffering.
    $path_args = explode('/', $path);
    ob_start();
    call_user_func_array('juicebox_page_xml', $path_args);
    $xml = ob_get_clean();
    if ($xml) {
      // For the directory we remove the last part of the path.
      array_pop($path_args);
      $test_dir = 'jb://' . implode('/', $path_args);
      if (file_prepare_directory($test_dir, FILE_CREATE_DIRECTORY)) {
        file_unmanaged_save_data($xml, 'jb://' . $path . '.xml', FILE_EXISTS_REPLACE);
      }
    }
  }
  $deploy_static_processing = FALSE;
}


/**
 * Implements hook_juicebox_gallery_data_alter().
 */
function deploy_static_juicebox_gallery_alter($juicebox, $data) {
  // Apply special processing only if we are in the middle of processing static
  // XML for a deployment.
  $deploy_static_processing = &drupal_static('deploy_static_deploy');
  if ($deploy_static_processing) {
    global $base_url;
    foreach ($juicebox->getImages() as $id => &$image) {
      foreach ($image['src_data'] as $key => &$value) {
        // Check of this property is an image URL. If so we need to request it
        // (to ensure that image styles are generated) and then alter the URL
        // to be relative to our static structure (as opposed to the absolute
        // format that is used by default).
        if (strpos($value, $base_url) === 0) {
          $result = drupal_http_request($value);
          if ($result->code != 200) {
            watchdog('deploy', 'There was an error fetching image url @url', array('@url' => $value), WATCHDOG_ERROR);
          }
          $value = str_replace($base_url, 'drupal', $value);
        }
      }
      // Re-save the altered image.
      $juicebox->addImage($image['src_data'], $image['title'], $image['caption'], NULL, $id);
    }
  }
}

